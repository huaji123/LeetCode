题目描述：编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为‘1’的个数（也称为汉明重量）

难度：简单

解法一：循环检查二进制位

思路：给定一个1，不断左移，并且与二进制数按位与

复杂度分析：时间复杂度O(k)，空间复杂度O(1)

代码：
public class Solution {
    public int hammingWeight(int n) {
        int ret = 0;
        for (int i = 0; i < 32; i++) {
            if ((n & (1 << i)) != 0) {
                ret++;
            }
        }
        return ret;
    }
}

解法二：位运算优化

思路：观察这个运算：n & (n−1)，其预算结果恰为把 n 的二进制位中的最低位的 1 变为 0 之后的结果。

如：6 & (6-1) = 4, 6 = (110)_2, 4 = (100)_2，运算结果 4 即为把 6 的二进制位中的最低位的 1 变为 0 之后的结果。这样我们可以利用这个位运算的性质加速我们的检查过程，在实际代码中，我们不断让当前的 n 与 n−1 做与运算，直到 n 变为 0 即可。因为每次运算会使得 n 的最低位的 1 被翻转，因此运算次数就等于 n 的二进制位中 1 的个数。

复杂度分析：时间复杂度O(logn),空间复杂度O(1)

代码：
public class Solution {
    public int hammingWeight(int n) {
        int ret = 0;
        while (n != 0) {
            n &= n - 1;
            ret++;
        }
        return ret;
    }
}
