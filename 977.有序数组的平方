题目描述：给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。

解法一：Java自带的排序

public int[] sortedSquares(int[] nums) {
        int[] ans = new int[nums.length];
        for (int i = 0; i < nums.length; ++i) {
            ans[i] = nums[i] * nums[i];
        }
        Arrays.sort(ans);
        return ans;
}

解法二：快速排序

int Pattion(int *a,int low,int high){
	int temp=a[low],pivoty=a[low];
	while(low<high){
		while(a[high]>=pivoty&&low<high) high--;
		a[low]=a[high];
		while(a[low]<=pivoty&&low<high) low++;
		a[high]=a[low];
	}
	a[low]=temp;
	return low;
}
void QuickSort(int *a,int low,int high){
	int p;
	if(low<high){
		p=Pattion(a,low,high);
		QuickSort(a,low,p-1);
		QuickSort(a,p+1,high);
	}
}

int* sortedSquares(int* a, int n, int* returnSize){
	*returnSize=n;
	if(n==0) return a;
    int k=0;
	for(int i=0;i<n;i++){
		a[k++]=a[i]*a[i];
	}
	QuickSort(a,0,n-1); 
	return a;
}
