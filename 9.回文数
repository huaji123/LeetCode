题目描述：给你一个整数x，如果x是一个回文整数，返回true；否则，返回false。回文数是指正序和倒序读都是一样的整数

难度：简单

解法一：将整数x转换成字符串，再转换成字符数组。

复杂度分析：时间复杂度O(N)，空间复杂度O(N)

代码：
class Solution {
    public boolean isPalindrome(int x) {
        String s = String.valueOf(x);
        char[] c = s.toCharArray();
        
        for(int i = 0; i <= (c.length-1)/2; ++i){
            if(c[i] != c[c.length-i-1])
                return false;
        }
        return true;
    }
}

解法二：反转一半数字

思路：避免溢出问题，将数字的后半部分进行反转，如果相同，则为回文数。

临界情况：负数不可能为回文数，个位数为0也不可能为回文数。

复杂度分析：时间复杂度O(logN)，空间复杂度O(1)

代码：
class Solution {
    public boolean isPalindrome(int x) {
        // 特殊情况：
        // 如上所述，当 x < 0 时，x 不是回文数。
        // 同样地，如果数字的最后一位是 0，为了使该数字为回文，
        // 则其第一位数字也应该是 0
        // 只有 0 满足这一属性
        if (x < 0 || (x % 10 == 0 && x != 0)) {
            return false;
        }

        int revertedNumber = 0;
        while (x > revertedNumber) {
            revertedNumber = revertedNumber * 10 + x % 10;
            x /= 10;
        }

        // 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。
        // 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，
        // 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。
        return x == revertedNumber || x == revertedNumber / 10;
    }
}

