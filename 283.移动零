题目描述：给定一个数组nums，编写一个函数将所有0移动到数组的末尾，同时保持非零元素的相对顺序
注意：必须在不复制数组的情况下原地对数组进行操作

示例1：
输入：nums = [0,1,0,3,12]
输出：[1,3,12,0,0]

思路一：边计算0的个数，边将非零元素向左移，最后在数组最后面补上0
代码：
public void moveZeroes(int[] nums) {
    int num=0;
    for(int i = 0; i < nums.length; i++){
        if(nums[i] == 0)
            //当nums[i] == 0 时，0元素数量++
            num++;
        else
            //不等于0，则将nums[i]前移num个位置
            nums[i-num] = nums[i]; 
    }
    //填补0
     for(int i = nums.length-1; i > nums.length-num-1; i--){
         nums[i] = 0;
     }
}

思路二：双指针，左指针指向当前已经处理好的序列的尾部，右指针指向待处理序列的头部。右指针不断向右移动，每次右指针指向非零数，则将左右指针对应的数交换，同时左指针右移
注：1.左指针左边均为非零数 2.右指针左边直到左指针处均为0

class Solution {
    public void moveZeroes(int[] nums) {
        int n = nums.length, left = 0, right = 0;
        while (right < n) {
            if (nums[right] != 0) {
                swap(nums, left, right);
                left++;
            }
            right++;
        }
    }

    public void swap(int[] nums, int left, int right) {
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }
}
