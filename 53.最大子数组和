题目描述：给定一个整数数组nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大值

解法一：暴力法

①使用两个指针
②i不动，移动j到最后
③移动i，重复②

public int maxSubArray(int[] nums) {
        int result = Integer.MIN_VALUE;
        int sum;
        for(int i = 0; i < nums.length; i++){
            sum = 0;
            for(int j = i; j < nums.length; j++){
                sum = sum + nums[j];
                result = result > sum ? result : sum;
            }
        }
        return result;
}
 
结果：测试用例超时

解法二：分治法

一分为二：左边，中间，右边

public int maxSubArray(int[] nums) {
        return getMax(nums, 0, nums.length - 1);
    }

    private int getMax(int[] nums, int l, int r) {
        if (l == r) {
            return nums[l];
        }
        int mid = l + (r-l)/2;
        int leftSum = getMax(nums, l, mid);
        int rightSum = getMax(nums, mid+1, r);
        int crossSum = crossSum(nums, l, r);
        return Math.max(crossSum, Math.max(leftSum, rightSum));
    }

    private int crossSum(int[] nums, int l, int r) {
        int mid = l + (r-l)/2;
        // from mid to leftmost
        int leftSum = nums[mid];
        int leftMax = leftSum;
        for (int i = mid - 1; i >= l; i--) {
            leftSum += nums[i];
            leftMax = Math.max(leftMax, leftSum);
        }

        // from mid+1 to rightmost
        int rightSum = nums[mid+1];
        int rightMax = rightSum;
        for (int i = mid + 2; i <= r; i++) {
            rightSum += nums[i];
            rightMax = Math.max(rightMax, rightSum);
        }

        return leftMax + rightMax;
}

解法三：动态规划，i位置的元素要么与前一位数相加，要么不加，该位置的最大值表示为前n位里的最大连续子数组的和

public int maxSubArray(int[] nums) {
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        int result = nums[0];
        for(int i = 1; i < nums.length; i++){
            dp[i] = (dp[i-1]+nums[i]) > nums[i] ? dp[i-1]+nums[i] : nums[i];
            result = result > dp[i] ? result : dp[i];
        }
        return result;
}
