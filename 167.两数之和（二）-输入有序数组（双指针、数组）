题目描述：给定一个下标从1开始的整数数组numbers，该数组已经按非递减顺序排列，，请你从数组中找出满足相加之和等于目标target的两个数。
         如果设这两个数分别是numbers[index1]和numbers[index2]，则1 <= index1 < index2 <= numbers.length。以长度为2的整数数组[index1,index2]形式返回下标

解法一：暴力破解，两个for循环即可实现，当出现两个相加等于target时，赋值给数组后立即返回可以降低时间复杂度
代码：
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] result = new int[2];
        for(int i = 0; i < numbers.length; i++){
            for(int j = i+1; j < numbers.length; j++){
                if(numbers[i] + numbers[j] == target){
                    result[0] = i+1;
                    result[1] = j+1;
                    return result;
                }
            }
        }
        return result;
    }
}


解法二：双指针，初始时两个指针分别指向第一个元素位置和最后一个元素位置。每次计算两个指针指向的两个元素之和，并和目标值比较。如果相等，则有唯一解；如果小于，则左指针右移一位；如果大于，则右指针左移一位。重复上述操作，直到找到答案

时间复杂度O(n)，空间复杂度O(1)

代码：
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int low = 0, high = numbers.length - 1;
        while (low < high) {
            int sum = numbers[low] + numbers[high];
            if (sum == target) {
                return new int[]{low + 1, high + 1};
            } else if (sum < target) {
                ++low;
            } else {
                --high;
            }
        }
        return new int[]{-1, -1};
    }
}

解法三：二分查找，在数组中找到两个数，使得它们的和等于目标值，可以首先固定第一个数，然后寻找第二个数，第二个数等于目标值减去第一个数的差。利用数组有序的性质，可以通过二分查找的方法寻找第二个数。为了避免重复寻找，只在第一个数的右侧寻找。

时间复杂度O(nlogn)，空间复杂度O(1)

代码：
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        for (int i = 0; i < numbers.length; ++i) {
            int low = i + 1, high = numbers.length - 1;
            while (low <= high) {
                int mid = (high - low) / 2 + low;
                if (numbers[mid] == target - numbers[i]) {
                    return new int[]{i + 1, mid + 1};
                } else if (numbers[mid] > target - numbers[i]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            }
        }
        return new int[]{-1, -1};
    }
}
