题目描述：给定一个非空整数数组，除了某元素只出现过一次之外，其余每个元素均出现两次。找出只出现一次的元素。

难度：简单

如果不考虑时间复杂度和空间复杂度的限制，这道题有很多种解法，可能的解法有如下几种。
1.使用集合存储数字。遍历数组中的每个数字，如果集合中没有该数字，则将该数字加入集合，如果集合中已经有该数字，则将该数字从集合中删除，最后剩下的数字就是只出现一次的数字。
2.使用哈希表存储每个数字和该数字出现的次数。遍历数组即可得到每个数字出现的次数，并更新哈希表，最后遍历哈希表，得到只出现一次的数字。
3.使用集合存储数组中出现的所有数字，并计算数组中的元素之和。由于集合保证元素无重复，因此计算集合中的所有元素之和的两倍，即为每个元素出现两次的情况下的元素之和。由于数组中只有一个元素出现一次，其余元素都出现两次，因此用集合中的元素之和的两倍减去数组中的元素之和，剩下的数就是数组中只出现一次的数字。
上述三种解法都需要额外使用 O(n)O(n) 的空间，其中 nn 是数组长度。


解法一：排序，第一个元素和第二个元素比较，第三个元素和第四个元素比较，以此类推，当有不同时，说明前一个元素只出现了一次

复杂度分析：时间复杂度O(N)，空间复杂度O(1)

代码：
class Solution {
    public int singleNumber(int[] nums) {
        Arrays.sort(nums);
        int i;
        for(i = 0; i < nums.length-1; i+=2){
            if(nums[i] != nums[i+1])
                return nums[i];
        }
        return nums[i]; 
    }
}

解法二：位运算

思路：
1.任何数和 0 做异或运算，结果仍然是原来的数，即 a⊕0=a。
2.任何数和其自身做异或运算，结果是 0，即 a⊕a=0。
3.异或运算满足交换律和结合律，即 a⊕b⊕a=b⊕a⊕a=b⊕(a⊕a)=b⊕0=b。
每个数都异或一次，出现两次的数异或之后会变成0，最后剩下只出现一次的数

复杂度分析：时间复杂度O(N)，空间复杂度：O(1)

代码：
class Solution {
    public int singleNumber(int[] nums) {
        int single = 0;
        for (int num : nums) {
            single ^= num;
        }
        return single;
    }
}
