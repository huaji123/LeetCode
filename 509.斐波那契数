题目描述：斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。F(0) = 0，F(1) = 1，F(n) = F(n - 1) + F(n - 2)，其中 n > 1

难度：简单

解法一：递归

复杂度分析：时间复杂度O(N)，空间复杂度O(1)

代码：
class Solution {
    public int fib(int n) {
        if(n == 0)
            return 0;
        else if(n == 1)
            return 1;
        else
            return fib(n-1) + fib(n-2);
    }
}

解法二：动态规划,[滚动数组思想]

复杂度分析：时间复杂度O(N)，空间复杂度O(1)

代码：
class Solution {
    public int fib(int n) {
        if (n < 2) {
            return n;
        }
        int p = 0, q = 0, r = 1;
        for (int i = 2; i <= n; ++i) {
            p = q; 
            q = r; 
            r = p + q;
        }
        return r;
    }
}

解法三：矩阵快速幂，使用{[1,1],[1,0]} * [F(n),F(n-1)] = [F(n+1),F(n)]。因此 [F(n+1),F(n)] = {[1,1],[1,0]}^n * [F(1),F(0)]

复杂度分析：时间复杂度O(log n),空间复杂度O(1)

代码：
class Solution {
    public int fib(int n) {
        if (n < 2) {
            return n;
        }
        int[][] q = {{1, 1}, {1, 0}};
        int[][] res = pow(q, n - 1);
        return res[0][0];
    }

    public int[][] pow(int[][] a, int n) {
        int[][] ret = {{1, 0}, {0, 1}};
        while (n > 0) {
            if ((n & 1) == 1) {
                ret = multiply(ret, a);
            }
            n >>= 1;
            a = multiply(a, a);
        }
        return ret;
    }

    public int[][] multiply(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j];
            }
        }
        return c;
    }
}

解法四：链接（https://leetcode-cn.com/problems/fibonacci-number/solution/fei-bo-na-qi-shu-by-leetcode-solution-o4ze/）
